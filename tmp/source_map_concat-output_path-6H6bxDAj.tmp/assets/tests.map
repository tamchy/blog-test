{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","blogs/tests/app.jshint.lint-test.js","blogs/tests/helpers/destroy-app.js","blogs/tests/helpers/destroy-app.jshint.lint-test.js","blogs/tests/helpers/module-for-acceptance.js","blogs/tests/helpers/module-for-acceptance.jshint.lint-test.js","blogs/tests/helpers/resolver.js","blogs/tests/helpers/resolver.jshint.lint-test.js","blogs/tests/helpers/start-app.js","blogs/tests/helpers/start-app.jshint.lint-test.js","blogs/tests/models/blog.jshint.lint-test.js","blogs/tests/models/post.jshint.lint-test.js","blogs/tests/resolver.jshint.lint-test.js","blogs/tests/router.jshint.lint-test.js","blogs/tests/routes/application.jshint.lint-test.js","blogs/tests/routes/blog.jshint.lint-test.js","blogs/tests/routes/blog/create.jshint.lint-test.js","blogs/tests/routes/login.jshint.lint-test.js","blogs/tests/routes/logout.jshint.lint-test.js","blogs/tests/routes/post.jshint.lint-test.js","blogs/tests/serializers/blog.jshint.lint-test.js","blogs/tests/serializers/post.jshint.lint-test.js","blogs/tests/test-helper.js","blogs/tests/test-helper.jshint.lint-test.js","blogs/tests/transforms/post-set.jshint.lint-test.js","blogs/tests/unit/models/blog-test.js","blogs/tests/unit/models/blog-test.jshint.lint-test.js","blogs/tests/unit/models/post-test.js","blogs/tests/unit/models/post-test.jshint.lint-test.js","blogs/tests/unit/routes/blog-test.js","blogs/tests/unit/routes/blog-test.jshint.lint-test.js","blogs/tests/unit/routes/blog/create-test.js","blogs/tests/unit/routes/blog/create-test.jshint.lint-test.js","blogs/tests/unit/routes/login-test.js","blogs/tests/unit/routes/login-test.jshint.lint-test.js","blogs/tests/unit/routes/logout-test.js","blogs/tests/unit/routes/logout-test.jshint.lint-test.js","blogs/tests/unit/routes/post-test.js","blogs/tests/unit/routes/post-test.jshint.lint-test.js","blogs/tests/unit/transforms/post-set-test.js","blogs/tests/unit/transforms/post-set-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('blogs/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('blogs/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('blogs/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('blogs/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'blogs/tests/helpers/start-app', 'blogs/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _blogsTestsHelpersStartApp, _blogsTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _blogsTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _blogsTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('blogs/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('blogs/tests/helpers/resolver', ['exports', 'blogs/resolver', 'blogs/config/environment'], function (exports, _blogsResolver, _blogsConfigEnvironment) {\n\n  var resolver = _blogsResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _blogsConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _blogsConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('blogs/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('blogs/tests/helpers/start-app', ['exports', 'ember', 'blogs/app', 'blogs/config/environment'], function (exports, _ember, _blogsApp, _blogsConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _blogsConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _blogsApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('blogs/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('blogs/tests/models/blog.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/blog.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/blog.js should pass jshint.');\n  });\n});","define('blogs/tests/models/post.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/post.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/post.js should pass jshint.');\n  });\n});","define('blogs/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('blogs/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('blogs/tests/routes/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('blogs/tests/routes/blog.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/blog.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/blog.js should pass jshint.');\n  });\n});","define('blogs/tests/routes/blog/create.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/blog/create.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/blog/create.js should pass jshint.');\n  });\n});","define('blogs/tests/routes/login.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass jshint.');\n  });\n});","define('blogs/tests/routes/logout.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/logout.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/logout.js should pass jshint.');\n  });\n});","define('blogs/tests/routes/post.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/post.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/post.js should pass jshint.');\n  });\n});","define('blogs/tests/serializers/blog.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/blog.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/blog.js should pass jshint.');\n  });\n});","define('blogs/tests/serializers/post.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/post.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/post.js should pass jshint.');\n  });\n});","define('blogs/tests/test-helper', ['exports', 'blogs/tests/helpers/resolver', 'ember-qunit'], function (exports, _blogsTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_blogsTestsHelpersResolver['default']);\n});","define('blogs/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('blogs/tests/transforms/post-set.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/post-set.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/post-set.js should pass jshint.');\n  });\n});","define('blogs/tests/unit/models/blog-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('blog', 'Unit | Model | blog', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('blogs/tests/unit/models/blog-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/blog-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/blog-test.js should pass jshint.');\n  });\n});","define('blogs/tests/unit/models/post-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('post', 'Unit | Model | post', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('blogs/tests/unit/models/post-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/post-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/post-test.js should pass jshint.');\n  });\n});","define('blogs/tests/unit/routes/blog-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:blog', 'Unit | Route | blog', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('blogs/tests/unit/routes/blog-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/blog-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/blog-test.js should pass jshint.');\n  });\n});","define('blogs/tests/unit/routes/blog/create-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:blog/create', 'Unit | Route | blog/create', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('blogs/tests/unit/routes/blog/create-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/blog/create-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/blog/create-test.js should pass jshint.');\n  });\n});","define('blogs/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('blogs/tests/unit/routes/login-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass jshint.');\n  });\n});","define('blogs/tests/unit/routes/logout-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:logout', 'Unit | Route | logout', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('blogs/tests/unit/routes/logout-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/logout-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/logout-test.js should pass jshint.');\n  });\n});","define('blogs/tests/unit/routes/post-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:post', 'Unit | Route | post', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('blogs/tests/unit/routes/post-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/post-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/post-test.js should pass jshint.');\n  });\n});","define('blogs/tests/unit/transforms/post-set-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:post-set', 'Unit | Transform | post set', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var transform = this.subject();\n    assert.ok(transform);\n  });\n});","define('blogs/tests/unit/transforms/post-set-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/transforms/post-set-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/post-set-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('blogs/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}